{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MYPC\\\\weatherproject\\\\Frontend\\\\src\\\\component\\\\hero.js\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Hero() {\n  // const [city, setCity]=useState(\"pune\");\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      onChange: '',\n      type: \"text\",\n      placeholder: \"Search Location \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: '',\n      children: \" Get Weather \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \" City :  \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \" Wind Speed :  \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true);\n}\n_c = Hero;\nexport default Hero;\n\n// import React, { useState } from \"react\";\n\n// function Hero() {\n//   const [city, setCity] = useState(\"\");\n//   const [forecast, setForecast] = useState([]);\n//   const [error, setError] = useState(\"\");\n\n//   const apiKey = \"9b93d18187994bb82e265588def39487\";\n\n//   // Fetch forecast by city name\n//   const getForecastByCity = async () => {\n//     if (!city) {\n//       setError(\"Please enter a city name\");\n//       setForecast([]);\n//       return;\n//     }\n\n//     try {\n//       const response = await fetch(\n//         `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${apiKey}&units=metric`\n//       );\n//       const data = await response.json();\n\n//       if (data.cod === \"200\" || data.cod === 200) {\n//         // Simplify: take one forecast per day (every 8th entry = 24h)\n//         const dailyForecast = data.list.filter((item, index) => index % 8 === 0);\n//         setForecast(dailyForecast);\n//         setError(\"\");\n//       } else {\n//         setError(data.message);\n//         setForecast([]);\n//       }\n//     } catch (err) {\n//       console.error(err);\n//       setError(\"Failed to fetch forecast data\");\n//       setForecast([]);\n//     }\n//   };\n\n//   // Fetch forecast by coordinates\n//   const getForecastByCoords = async (lat, lon) => {\n//     try {\n//       const response = await fetch(\n//         `https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&appid=${apiKey}&units=metric`\n//       );\n//       const data = await response.json();\n\n//       if (data.cod === \"200\" || data.cod === 200) {\n//         const dailyForecast = data.list.filter((item, index) => index % 8 === 0);\n//         setForecast(dailyForecast);\n//         setError(\"\");\n//       } else {\n//         setError(data.message);\n//         setForecast([]);\n//       }\n//     } catch (err) {\n//       console.error(err);\n//       setError(\"Failed to fetch forecast data\");\n//       setForecast([]);\n//     }\n//   };\n\n//   const handleCurrentLocation = () => {\n//     if (navigator.geolocation) {\n//       navigator.geolocation.getCurrentPosition(\n//         (position) => {\n//           const lat = position.coords.latitude;\n//           const lon = position.coords.longitude;\n//           getForecastByCoords(lat, lon);\n//         },\n//         (err) => {\n//           console.error(err);\n//           setError(\"Unable to get your location\");\n//         }\n//       );\n//     } else {\n//       setError(\"Geolocation is not supported by your browser\");\n//     }\n//   };\n\n//   return (\n//     <div style={{ textAlign: \"center\", marginTop: \"50px\" }}>\n//       <input\n//         type=\"text\"\n//         placeholder=\"Search Location\"\n//         value={city}\n//         onChange={(e) => setCity(e.target.value)}\n//         style={{\n//           padding: \"10px\",\n//           width: \"250px\",\n//           borderRadius: \"5px\",\n//           border: \"1px solid #ccc\",\n//           marginRight: \"10px\",\n//         }}\n//       />\n//       <button\n//         onClick={getForecastByCity}\n//         style={{\n//           padding: \"10px 20px\",\n//           borderRadius: \"5px\",\n//           border: \"none\",\n//           backgroundColor: \"#007bff\",\n//           color: \"#fff\",\n//           cursor: \"pointer\",\n//           marginRight: \"10px\",\n//         }}\n//       >\n//         Get Forecast\n//       </button>\n//       <button\n//         onClick={handleCurrentLocation}\n//         style={{\n//           padding: \"10px 20px\",\n//           borderRadius: \"5px\",\n//           border: \"none\",\n//           backgroundColor: \"#28a745\",\n//           color: \"#fff\",\n//           cursor: \"pointer\",\n//         }}\n//       >\n//         Current Location\n//       </button>\n\n//       {error && <p style={{ color: \"red\", marginTop: \"20px\" }}>{error}</p>}\n\n//       {forecast.length > 0 && (\n//         <div style={{ marginTop: \"30px\" }}>\n//           <h2>5-Day Forecast</h2>\n//           {forecast.map((day, index) => (\n//             <div key={index} style={{ marginBottom: \"15px\" }}>\n//               <h4>Day {index + 1}</h4>\n//               <p>Temperature: {day.main.temp} Â°C</p>\n//               <p>Weather: {day.weather[0].description}</p>\n//               <p>Wind Speed: {day.wind.speed} m/s</p>\n//             </div>\n//           ))}\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default Hero;\nvar _c;\n$RefreshReg$(_c, \"Hero\");","map":{"version":3,"names":["Hero","_jsxDEV","_Fragment","children","onChange","type","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/MYPC/weatherproject/Frontend/src/component/hero.js"],"sourcesContent":["\r\n\r\nfunction Hero(){\r\n    \r\n// const [city, setCity]=useState(\"pune\");\r\n\r\n    return(\r\n        <>\r\n         <input  onChange={''} type=\"text\" placeholder=\"Search Location \" />\r\n         <button onClick={''} > Get Weather </button>\r\n         <h2> City :  </h2>\r\n         <h4> Wind Speed :  </h4>\r\n        </>\r\n    );\r\n}\r\nexport default Hero;\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState } from \"react\";\r\n\r\n// function Hero() {\r\n//   const [city, setCity] = useState(\"\");\r\n//   const [forecast, setForecast] = useState([]);\r\n//   const [error, setError] = useState(\"\");\r\n\r\n//   const apiKey = \"9b93d18187994bb82e265588def39487\";\r\n\r\n//   // Fetch forecast by city name\r\n//   const getForecastByCity = async () => {\r\n//     if (!city) {\r\n//       setError(\"Please enter a city name\");\r\n//       setForecast([]);\r\n//       return;\r\n//     }\r\n\r\n//     try {\r\n//       const response = await fetch(\r\n//         `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${apiKey}&units=metric`\r\n//       );\r\n//       const data = await response.json();\r\n\r\n//       if (data.cod === \"200\" || data.cod === 200) {\r\n//         // Simplify: take one forecast per day (every 8th entry = 24h)\r\n//         const dailyForecast = data.list.filter((item, index) => index % 8 === 0);\r\n//         setForecast(dailyForecast);\r\n//         setError(\"\");\r\n//       } else {\r\n//         setError(data.message);\r\n//         setForecast([]);\r\n//       }\r\n//     } catch (err) {\r\n//       console.error(err);\r\n//       setError(\"Failed to fetch forecast data\");\r\n//       setForecast([]);\r\n//     }\r\n//   };\r\n\r\n//   // Fetch forecast by coordinates\r\n//   const getForecastByCoords = async (lat, lon) => {\r\n//     try {\r\n//       const response = await fetch(\r\n//         `https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&appid=${apiKey}&units=metric`\r\n//       );\r\n//       const data = await response.json();\r\n\r\n//       if (data.cod === \"200\" || data.cod === 200) {\r\n//         const dailyForecast = data.list.filter((item, index) => index % 8 === 0);\r\n//         setForecast(dailyForecast);\r\n//         setError(\"\");\r\n//       } else {\r\n//         setError(data.message);\r\n//         setForecast([]);\r\n//       }\r\n//     } catch (err) {\r\n//       console.error(err);\r\n//       setError(\"Failed to fetch forecast data\");\r\n//       setForecast([]);\r\n//     }\r\n//   };\r\n\r\n//   const handleCurrentLocation = () => {\r\n//     if (navigator.geolocation) {\r\n//       navigator.geolocation.getCurrentPosition(\r\n//         (position) => {\r\n//           const lat = position.coords.latitude;\r\n//           const lon = position.coords.longitude;\r\n//           getForecastByCoords(lat, lon);\r\n//         },\r\n//         (err) => {\r\n//           console.error(err);\r\n//           setError(\"Unable to get your location\");\r\n//         }\r\n//       );\r\n//     } else {\r\n//       setError(\"Geolocation is not supported by your browser\");\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div style={{ textAlign: \"center\", marginTop: \"50px\" }}>\r\n//       <input\r\n//         type=\"text\"\r\n//         placeholder=\"Search Location\"\r\n//         value={city}\r\n//         onChange={(e) => setCity(e.target.value)}\r\n//         style={{\r\n//           padding: \"10px\",\r\n//           width: \"250px\",\r\n//           borderRadius: \"5px\",\r\n//           border: \"1px solid #ccc\",\r\n//           marginRight: \"10px\",\r\n//         }}\r\n//       />\r\n//       <button\r\n//         onClick={getForecastByCity}\r\n//         style={{\r\n//           padding: \"10px 20px\",\r\n//           borderRadius: \"5px\",\r\n//           border: \"none\",\r\n//           backgroundColor: \"#007bff\",\r\n//           color: \"#fff\",\r\n//           cursor: \"pointer\",\r\n//           marginRight: \"10px\",\r\n//         }}\r\n//       >\r\n//         Get Forecast\r\n//       </button>\r\n//       <button\r\n//         onClick={handleCurrentLocation}\r\n//         style={{\r\n//           padding: \"10px 20px\",\r\n//           borderRadius: \"5px\",\r\n//           border: \"none\",\r\n//           backgroundColor: \"#28a745\",\r\n//           color: \"#fff\",\r\n//           cursor: \"pointer\",\r\n//         }}\r\n//       >\r\n//         Current Location\r\n//       </button>\r\n\r\n//       {error && <p style={{ color: \"red\", marginTop: \"20px\" }}>{error}</p>}\r\n\r\n//       {forecast.length > 0 && (\r\n//         <div style={{ marginTop: \"30px\" }}>\r\n//           <h2>5-Day Forecast</h2>\r\n//           {forecast.map((day, index) => (\r\n//             <div key={index} style={{ marginBottom: \"15px\" }}>\r\n//               <h4>Day {index + 1}</h4>\r\n//               <p>Temperature: {day.main.temp} Â°C</p>\r\n//               <p>Weather: {day.weather[0].description}</p>\r\n//               <p>Wind Speed: {day.wind.speed} m/s</p>\r\n//             </div>\r\n//           ))}\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Hero;\r\n"],"mappings":";;AAEA,SAASA,IAAIA,CAAA,EAAE;EAEf;;EAEI,oBACIC,OAAA,CAAAC,SAAA;IAAAC,QAAA,gBACCF,OAAA;MAAQG,QAAQ,EAAE,EAAG;MAACC,IAAI,EAAC,MAAM;MAACC,WAAW,EAAC;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACnET,OAAA;MAAQU,OAAO,EAAE,EAAG;MAAAR,QAAA,EAAE;IAAa;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC5CT,OAAA;MAAAE,QAAA,EAAI;IAAS;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAClBT,OAAA;MAAAE,QAAA,EAAI;IAAe;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA,eACvB,CAAC;AAEX;AAACE,EAAA,GAZQZ,IAAI;AAab,eAAeA,IAAI;;AAOnignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}